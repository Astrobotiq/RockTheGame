//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""3e541cee-0b5b-48a7-93fb-480f9c216479"",
            ""actions"": [
                {
                    ""name"": ""LeftRotation"",
                    ""type"": ""Value"",
                    ""id"": ""290361e9-a2bb-4ab3-800f-40ab9fecd2e9"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftGrapling"",
                    ""type"": ""Button"",
                    ""id"": ""2353e472-3a71-4434-8f71-dbf292b5c602"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e79588c9-412d-480b-a086-f236f6db57bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightRotation"",
                    ""type"": ""Value"",
                    ""id"": ""443b8e20-854c-4989-a3bc-8c19c9b2e44e"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightGrapling"",
                    ""type"": ""Button"",
                    ""id"": ""bf8b4673-90a7-43a6-88a3-3a0daa0aa579"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d2d9d06e-b25e-4319-8a54-2b06d925d774"",
                    ""path"": ""<XInputController>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74174621-5e1f-4974-804b-e37552cd99ae"",
                    ""path"": ""<XInputController>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftGrapling"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14b7f34d-5437-4b57-9172-5a3f3a22af4a"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4223d6d-9a4a-4888-9d27-c6fba34ab4d5"",
                    ""path"": ""<XInputController>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df859406-f805-43f8-978e-638c0ffbb2f9"",
                    ""path"": ""<XInputController>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightGrapling"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_LeftRotation = m_Gameplay.FindAction("LeftRotation", throwIfNotFound: true);
        m_Gameplay_LeftGrapling = m_Gameplay.FindAction("LeftGrapling", throwIfNotFound: true);
        m_Gameplay_Jump = m_Gameplay.FindAction("Jump", throwIfNotFound: true);
        m_Gameplay_RightRotation = m_Gameplay.FindAction("RightRotation", throwIfNotFound: true);
        m_Gameplay_RightGrapling = m_Gameplay.FindAction("RightGrapling", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_LeftRotation;
    private readonly InputAction m_Gameplay_LeftGrapling;
    private readonly InputAction m_Gameplay_Jump;
    private readonly InputAction m_Gameplay_RightRotation;
    private readonly InputAction m_Gameplay_RightGrapling;
    public struct GameplayActions
    {
        private @Input m_Wrapper;
        public GameplayActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftRotation => m_Wrapper.m_Gameplay_LeftRotation;
        public InputAction @LeftGrapling => m_Wrapper.m_Gameplay_LeftGrapling;
        public InputAction @Jump => m_Wrapper.m_Gameplay_Jump;
        public InputAction @RightRotation => m_Wrapper.m_Gameplay_RightRotation;
        public InputAction @RightGrapling => m_Wrapper.m_Gameplay_RightGrapling;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @LeftRotation.started += instance.OnLeftRotation;
            @LeftRotation.performed += instance.OnLeftRotation;
            @LeftRotation.canceled += instance.OnLeftRotation;
            @LeftGrapling.started += instance.OnLeftGrapling;
            @LeftGrapling.performed += instance.OnLeftGrapling;
            @LeftGrapling.canceled += instance.OnLeftGrapling;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @RightRotation.started += instance.OnRightRotation;
            @RightRotation.performed += instance.OnRightRotation;
            @RightRotation.canceled += instance.OnRightRotation;
            @RightGrapling.started += instance.OnRightGrapling;
            @RightGrapling.performed += instance.OnRightGrapling;
            @RightGrapling.canceled += instance.OnRightGrapling;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @LeftRotation.started -= instance.OnLeftRotation;
            @LeftRotation.performed -= instance.OnLeftRotation;
            @LeftRotation.canceled -= instance.OnLeftRotation;
            @LeftGrapling.started -= instance.OnLeftGrapling;
            @LeftGrapling.performed -= instance.OnLeftGrapling;
            @LeftGrapling.canceled -= instance.OnLeftGrapling;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @RightRotation.started -= instance.OnRightRotation;
            @RightRotation.performed -= instance.OnRightRotation;
            @RightRotation.canceled -= instance.OnRightRotation;
            @RightGrapling.started -= instance.OnRightGrapling;
            @RightGrapling.performed -= instance.OnRightGrapling;
            @RightGrapling.canceled -= instance.OnRightGrapling;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnLeftRotation(InputAction.CallbackContext context);
        void OnLeftGrapling(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRightRotation(InputAction.CallbackContext context);
        void OnRightGrapling(InputAction.CallbackContext context);
    }
}
